use std::ops::{Add, Div, Mul, Sub};

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct GF(u8);

impl Add<GF> for GF {
    type Output = GF;

    fn add(self, other: GF) -> GF {
        GF(self.0 ^ other.0)
    }
}

impl Sub<GF> for GF {
    type Output = GF;

    fn sub(self, other: GF) -> GF {
        GF(self.0 ^ other.0)
    }
}

impl Mul<GF> for GF {
    type Output = GF;

    fn mul(self, other: GF) -> GF {
        if self.0 == 0 || other.0 == 0 {
            return EXP[255];
        }

        let log_self = LOG[self.0 as usize];
        let log_other = LOG[other.0 as usize];

        EXP[((log_self as u16 + log_other as u16) % 255) as usize]
    }
}

impl Div<GF> for GF {
    type Output = GF;

    fn div(self, other: GF) -> GF {
        let log_self = LOG[self.0 as usize];
        let log_other = LOG[other.0 as usize];
        let mut diff = log_self as i16 - log_other as i16;

        diff = if diff < 0 { diff + 255 } else { diff };

        EXP[diff as usize]
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    pub fn test_gf_add() {
        // zero
        assert_eq!(GF(0) + GF(123), GF(123));

        // inverse sub
        assert_eq!(GF(40) + GF(193), GF(233));

        // commutativity
        assert_eq!(GF(40) + GF(193), GF(193) + GF(40));

        // associativity
        assert_eq!((GF(40) + GF(193)) + GF(78), GF(40) + (GF(193) + GF(78)));
    }

    #[test]
    pub fn test_gf_sub() {
        // zero
        assert_eq!(GF(123) - GF(123), GF(0));

        // inverse add
        assert_eq!(GF(233) - GF(193), GF(40));
        assert_eq!(GF(233) - GF(40), GF(193));
    }

    #[test]
    pub fn test_gf_mul() {
        // zero
        assert_eq!(GF(40) * GF(0), GF(0));
        assert_eq!(GF(0) * GF(40), GF(0));

        // unit
        assert_eq!(GF(40) * GF(1), GF(40));
        assert_eq!(GF(1) * GF(40), GF(40));

        // inverse div
        assert_eq!(GF(40) * GF(193), GF(67));

        // commutativity
        assert_eq!(GF(40) * GF(193), GF(193) * GF(40));

        // associativity
        assert_eq!((GF(40) * GF(193)) * GF(78), GF(40) * (GF(193) * GF(78)));

        // distributivity
        assert_eq!(
            GF(40) * (GF(193) + GF(78)),
            GF(40) * GF(193) + GF(40) * GF(78)
        );
    }

    #[test]
    pub fn test_gf_div() {
        // unit
        assert_eq!(GF(40) / GF(40), GF(1));
        assert_eq!(GF(40) / GF(1), GF(40));

        // inverse mul
        assert_eq!(GF(67) / GF(193), GF(40));
        assert_eq!(GF(67) / GF(40), GF(193));
    }

}

// exp and log tables with base 2 in Galois Field 2^8 under modulo 0b100011101
// to generate:
/* 
let mut log: Vec<u8> = vec![0; 256];
let mut exp: Vec<u8> = vec![0; 256];
let modulo: u16 = 0b100011101;

let mut alpha: u16 = 1;
for i in 0..255 {
    exp[i] = (alpha & 0xff) as u8;
    log[alpha as usize] = i as u8;

    alpha *= 2;
    if alpha > 255 {
        alpha ^= modulo
    }
}
*/

const EXP: [GF; 256] = [
    GF(0x01),
    GF(0x02),
    GF(0x04),
    GF(0x08),
    GF(0x10),
    GF(0x20),
    GF(0x40),
    GF(0x80),
    GF(0x1D),
    GF(0x3A),
    GF(0x74),
    GF(0xE8),
    GF(0xCD),
    GF(0x87),
    GF(0x13),
    GF(0x26),
    GF(0x4C),
    GF(0x98),
    GF(0x2D),
    GF(0x5A),
    GF(0xB4),
    GF(0x75),
    GF(0xEA),
    GF(0xC9),
    GF(0x8F),
    GF(0x03),
    GF(0x06),
    GF(0x0C),
    GF(0x18),
    GF(0x30),
    GF(0x60),
    GF(0xC0),
    GF(0x9D),
    GF(0x27),
    GF(0x4E),
    GF(0x9C),
    GF(0x25),
    GF(0x4A),
    GF(0x94),
    GF(0x35),
    GF(0x6A),
    GF(0xD4),
    GF(0xB5),
    GF(0x77),
    GF(0xEE),
    GF(0xC1),
    GF(0x9F),
    GF(0x23),
    GF(0x46),
    GF(0x8C),
    GF(0x05),
    GF(0x0A),
    GF(0x14),
    GF(0x28),
    GF(0x50),
    GF(0xA0),
    GF(0x5D),
    GF(0xBA),
    GF(0x69),
    GF(0xD2),
    GF(0xB9),
    GF(0x6F),
    GF(0xDE),
    GF(0xA1),
    GF(0x5F),
    GF(0xBE),
    GF(0x61),
    GF(0xC2),
    GF(0x99),
    GF(0x2F),
    GF(0x5E),
    GF(0xBC),
    GF(0x65),
    GF(0xCA),
    GF(0x89),
    GF(0x0F),
    GF(0x1E),
    GF(0x3C),
    GF(0x78),
    GF(0xF0),
    GF(0xFD),
    GF(0xE7),
    GF(0xD3),
    GF(0xBB),
    GF(0x6B),
    GF(0xD6),
    GF(0xB1),
    GF(0x7F),
    GF(0xFE),
    GF(0xE1),
    GF(0xDF),
    GF(0xA3),
    GF(0x5B),
    GF(0xB6),
    GF(0x71),
    GF(0xE2),
    GF(0xD9),
    GF(0xAF),
    GF(0x43),
    GF(0x86),
    GF(0x11),
    GF(0x22),
    GF(0x44),
    GF(0x88),
    GF(0x0D),
    GF(0x1A),
    GF(0x34),
    GF(0x68),
    GF(0xD0),
    GF(0xBD),
    GF(0x67),
    GF(0xCE),
    GF(0x81),
    GF(0x1F),
    GF(0x3E),
    GF(0x7C),
    GF(0xF8),
    GF(0xED),
    GF(0xC7),
    GF(0x93),
    GF(0x3B),
    GF(0x76),
    GF(0xEC),
    GF(0xC5),
    GF(0x97),
    GF(0x33),
    GF(0x66),
    GF(0xCC),
    GF(0x85),
    GF(0x17),
    GF(0x2E),
    GF(0x5C),
    GF(0xB8),
    GF(0x6D),
    GF(0xDA),
    GF(0xA9),
    GF(0x4F),
    GF(0x9E),
    GF(0x21),
    GF(0x42),
    GF(0x84),
    GF(0x15),
    GF(0x2A),
    GF(0x54),
    GF(0xA8),
    GF(0x4D),
    GF(0x9A),
    GF(0x29),
    GF(0x52),
    GF(0xA4),
    GF(0x55),
    GF(0xAA),
    GF(0x49),
    GF(0x92),
    GF(0x39),
    GF(0x72),
    GF(0xE4),
    GF(0xD5),
    GF(0xB7),
    GF(0x73),
    GF(0xE6),
    GF(0xD1),
    GF(0xBF),
    GF(0x63),
    GF(0xC6),
    GF(0x91),
    GF(0x3F),
    GF(0x7E),
    GF(0xFC),
    GF(0xE5),
    GF(0xD7),
    GF(0xB3),
    GF(0x7B),
    GF(0xF6),
    GF(0xF1),
    GF(0xFF),
    GF(0xE3),
    GF(0xDB),
    GF(0xAB),
    GF(0x4B),
    GF(0x96),
    GF(0x31),
    GF(0x62),
    GF(0xC4),
    GF(0x95),
    GF(0x37),
    GF(0x6E),
    GF(0xDC),
    GF(0xA5),
    GF(0x57),
    GF(0xAE),
    GF(0x41),
    GF(0x82),
    GF(0x19),
    GF(0x32),
    GF(0x64),
    GF(0xC8),
    GF(0x8D),
    GF(0x07),
    GF(0x0E),
    GF(0x1C),
    GF(0x38),
    GF(0x70),
    GF(0xE0),
    GF(0xDD),
    GF(0xA7),
    GF(0x53),
    GF(0xA6),
    GF(0x51),
    GF(0xA2),
    GF(0x59),
    GF(0xB2),
    GF(0x79),
    GF(0xF2),
    GF(0xF9),
    GF(0xEF),
    GF(0xC3),
    GF(0x9B),
    GF(0x2B),
    GF(0x56),
    GF(0xAC),
    GF(0x45),
    GF(0x8A),
    GF(0x09),
    GF(0x12),
    GF(0x24),
    GF(0x48),
    GF(0x90),
    GF(0x3D),
    GF(0x7A),
    GF(0xF4),
    GF(0xF5),
    GF(0xF7),
    GF(0xF3),
    GF(0xFB),
    GF(0xEB),
    GF(0xCB),
    GF(0x8B),
    GF(0x0B),
    GF(0x16),
    GF(0x2C),
    GF(0x58),
    GF(0xB0),
    GF(0x7D),
    GF(0xFA),
    GF(0xE9),
    GF(0xCF),
    GF(0x83),
    GF(0x1B),
    GF(0x36),
    GF(0x6C),
    GF(0xD8),
    GF(0xAD),
    GF(0x47),
    GF(0x8E),
    GF(0x00),
];

const LOG: [u8; 256] = [
    0x00, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1A, 0xC6, 0x03, 0xDF, 0x33, 0xEE, 0x1B, 0x68, 0xC7, 0x4B,
    0x04, 0x64, 0xE0, 0x0E, 0x34, 0x8D, 0xEF, 0x81, 0x1C, 0xC1, 0x69, 0xF8, 0xC8, 0x08, 0x4C, 0x71,
    0x05, 0x8A, 0x65, 0x2F, 0xE1, 0x24, 0x0F, 0x21, 0x35, 0x93, 0x8E, 0xDA, 0xF0, 0x12, 0x82, 0x45,
    0x1D, 0xB5, 0xC2, 0x7D, 0x6A, 0x27, 0xF9, 0xB9, 0xC9, 0x9A, 0x09, 0x78, 0x4D, 0xE4, 0x72, 0xA6,
    0x06, 0xBF, 0x8B, 0x62, 0x66, 0xDD, 0x30, 0xFD, 0xE2, 0x98, 0x25, 0xB3, 0x10, 0x91, 0x22, 0x88,
    0x36, 0xD0, 0x94, 0xCE, 0x8F, 0x96, 0xDB, 0xBD, 0xF1, 0xD2, 0x13, 0x5C, 0x83, 0x38, 0x46, 0x40,
    0x1E, 0x42, 0xB6, 0xA3, 0xC3, 0x48, 0x7E, 0x6E, 0x6B, 0x3A, 0x28, 0x54, 0xFA, 0x85, 0xBA, 0x3D,
    0xCA, 0x5E, 0x9B, 0x9F, 0x0A, 0x15, 0x79, 0x2B, 0x4E, 0xD4, 0xE5, 0xAC, 0x73, 0xF3, 0xA7, 0x57,
    0x07, 0x70, 0xC0, 0xF7, 0x8C, 0x80, 0x63, 0x0D, 0x67, 0x4A, 0xDE, 0xED, 0x31, 0xC5, 0xFE, 0x18,
    0xE3, 0xA5, 0x99, 0x77, 0x26, 0xB8, 0xB4, 0x7C, 0x11, 0x44, 0x92, 0xD9, 0x23, 0x20, 0x89, 0x2E,
    0x37, 0x3F, 0xD1, 0x5B, 0x95, 0xBC, 0xCF, 0xCD, 0x90, 0x87, 0x97, 0xB2, 0xDC, 0xFC, 0xBE, 0x61,
    0xF2, 0x56, 0xD3, 0xAB, 0x14, 0x2A, 0x5D, 0x9E, 0x84, 0x3C, 0x39, 0x53, 0x47, 0x6D, 0x41, 0xA2,
    0x1F, 0x2D, 0x43, 0xD8, 0xB7, 0x7B, 0xA4, 0x76, 0xC4, 0x17, 0x49, 0xEC, 0x7F, 0x0C, 0x6F, 0xF6,
    0x6C, 0xA1, 0x3B, 0x52, 0x29, 0x9D, 0x55, 0xAA, 0xFB, 0x60, 0x86, 0xB1, 0xBB, 0xCC, 0x3E, 0x5A,
    0xCB, 0x59, 0x5F, 0xB0, 0x9C, 0xA9, 0xA0, 0x51, 0x0B, 0xF5, 0x16, 0xEB, 0x7A, 0x75, 0x2C, 0xD7,
    0x4F, 0xAE, 0xD5, 0xE9, 0xE6, 0xE7, 0xAD, 0xE8, 0x74, 0xD6, 0xF4, 0xEA, 0xA8, 0x50, 0x58, 0xAF,
];
